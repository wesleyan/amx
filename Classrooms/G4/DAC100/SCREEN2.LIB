PROGRAM_NAME='SCREEN2'
(*   DATE:12/10/97    TIME:15:55:23    *)
(***********************************************************)
(*               CONSTANT DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_CONSTANT

(* !!                                 !! *)
(* !! DO NOT OVERRIDE THESE CONSTANTS !! *)
(* !!                                 !! *)

(* MISC *)
#IF_NOT_DEFINED SYSCALL_MISC
#DEFINE SYSCALL_MISC
NO_BUTTON           = 0
NO_FUNCTION         = 256
#END_IF

#IF_NOT_DEFINED SCREEN2_LOCKOUT
SCREEN2_LOCKOUT = 0
#END_IF

#IF_NOT_DEFINED SCREEN2_BREAK_TIME
SCREEN2_BREAK_TIME = 5
#END_IF

#IF_NOT_DEFINED SCREEN2_DEFEAT_FEEDBACK
SCREEN2_DEFEAT_FEEDBACK = 0
#END_IF

(***********************************************************)
(*           SUBROUTINE DEFINITIONS GO BELOW               *)
(***********************************************************)

(* controls a screen with timed relays and optional stop     *)
(* stop relay is up and down relays together                 *)
(* use 0 as a button channel if the button doesn't exist     *)
#IF_NOT_DEFINED __NETLINX__
DEFINE_CALL 'SCREEN2' (PANEL,UPB,DNB,STB,CARD,UP_RELAY,DN_RELAY,STOP_RELAY,FIRST)
#END_IF
#IF_DEFINED __NETLINX__
DEFINE_CALL 'SCREEN2' (DEV PANEL,UPB,DNB,STB,DEV CARD,UP_RELAY,DN_RELAY,STOP_RELAY,FIRST)
#END_IF
LOCAL_VAR REAL_STATUS PEND_STATUS PUSH_STATUS LOCKOUT WAITING_DEFAULT
          UP_TIME DN_TIME MAX_LOCKOUT
(* PANEL      - control panel device number                     *)
(* UPB        - channel number of up button                     *)
(* DNB        - channel number of down button                   *)
(* STOPB      - channel number of stop button                   *)
(* CARD       - control device number                           *)
(* UP_RELAY   - number of up relay                              *)
(* DN_RELAY   - number of down relay                            *)
(* STOP_RELAY - unused                                          *)
(* FIRST      - time adjustment:                                *)
(*          low byte=time for screen dn to run in seconds       *)
(*          high byte=time for screen up to run in secinds      *)
(*                    default to dn time if high byte = 0       *)
(*          if low bye is 0, pulse time defaults to 1/2 sec.    *)
(*          ex: screen need relay to be held for 12 seconds     *)
(*            to go up and 10 seconds to go down:               *)
(*          FIRST = (12*256)+10                                 *)
{
#IF_DEFINED SYSCALL_NOTIFY
    PUSH[PANEL,UPB]
    PUSH[PANEL,DNB]
    PUSH[PANEL,STB]
    {
        SEND_STRING 0,"'IN SYSCALL ',39,'SCREEN2',39,' [',__SYSTEM_CALL_NUM__,
          ']',13,10"
    }
#END_IF

(* THERE IS NO STOP RELAY! *)
  STOP_RELAY = STOP_RELAY

(* GET THE RUN TIMES IF WE NEED IT *)
    IF (FIRST BAND $00FF)
        DN_TIME=(FIRST BAND $00FF) * 10
    ELSE
        DN_TIME=5 (* DEFAULT *)
    IF (FIRST BAND $FF00)
        UP_TIME=((FIRST BAND $FF00)/$FF) * 10
    ELSE
        UP_TIME = DN_TIME

(* SELECT OPERATING MODE *)
  SELECT
  {
(* SCREEN UP FUNCTION *)
#IF_NOT_DEFINED __NETLINX__
    ACTIVE (PANEL = 0 && UPB):
#END_IF
#IF_DEFINED __NETLINX__
    ACTIVE (PANEL.NUMBER = 0 && UPB):
#END_IF
    {
      IF (((!LOCKOUT) && SCREEN2_LOCKOUT) || (!SCREEN2_LOCKOUT))
      { (* ONLY SETUP EXECUTION IF NOT LOCKOUT OR LOCKOUT NOT ACTIVE *)
        CANCEL_WAIT 'SCREEN2 X'      (* CANCEL THE EXECUTE WAIT *)
        OFF[CARD,DN_RELAY]        (* TURN OFF THE DOWN AND STOP RELAYS *)
        PEND_STATUS = 1            (* SET PENDSING STATUS TO UP *)
        PUSH_STATUS = 0            (* CLEAR PUSH STATUS TO FORCE PULSE-LIKE *)
      }
    }
(* SCREEN DN FUNCTION *)
#IF_NOT_DEFINED __NETLINX__
    ACTIVE (PANEL = 0 && DNB):
#END_IF
#IF_DEFINED __NETLINX__
    ACTIVE (PANEL.NUMBER = 0 && DNB):
#END_IF
    {
      IF (((!LOCKOUT) && SCREEN2_LOCKOUT) || (!SCREEN2_LOCKOUT))
      { (* ONLY SETUP EXECUTION IF NOT LOCKOUT OR LOCKOUT NOT ACTIVE *)
        CANCEL_WAIT 'SCREEN2 X'   (* CANCEL THE EXECUTE WAIT *)
        OFF[CARD,UP_RELAY]        (* TURN OFF THE UP AND STOP RELAYS *)
        PEND_STATUS = 2            (* SET PENDSING STATUS TO DOWN *)
        PUSH_STATUS = 0            (* CLEAR PUSH STATUS TO FORCE PULSE-LIKE *)
      }
    }
(* SCREEN STOP FUNCTION *)
#IF_NOT_DEFINED __NETLINX__
    ACTIVE (PANEL = 0 && STB):
#END_IF
#IF_DEFINED __NETLINX__
    ACTIVE (PANEL.NUMBER = 0 && STB):
#END_IF
    { (* NEVER LOCKOUT STOP *)
      CANCEL_WAIT 'SCREEN2 OFF'   (* CANCEL THE RELAY OFF WAIT *)
      CANCEL_WAIT 'SCREEN2 X'     (* CANCEL THE XEXECUTION WAIT *)
      OFF[CARD,UP_RELAY]          (* TURN OFF UP AND DOWN RELAYS *)
      OFF[CARD,DN_RELAY]
      PULSE[CARD,UP_RELAY]        (* PULSE STOP *)
      PULSE[CARD,DN_RELAY]        (* PULSE STOP *)
      PEND_STATUS = 0              (* CANCEL WAIT ENGINE *)
      REAL_STATUS = 3              (* THE REAL STATUS OF THE SCREEN IS STOPED *)
      PUSH_STATUS = 0              (* CLEAR  PUSH STATUS FOR FOCRE PULSE-LIKE *)
      OFF[LOCKOUT]                 (* STOP IS NEVER LOCKED OUT *)
      CANCEL_WAIT 'SCREEN2 CLRLOCK'
    }
(* PUSH BUTTONS *)
    ACTIVE (1):
    {
      PUSH[PANEL,UPB]              (* UP BUTTON *)
      {
        IF (((!LOCKOUT) && SCREEN2_LOCKOUT) || (!SCREEN2_LOCKOUT))
        { (* ONLY SETUP EXECUTION IF NOT LOCKOUT OR LOCKOUT NOT ACTIVE *)
          CANCEL_WAIT 'SCREEN2 X' (* CANCEL LAST EXECUTION *)
          OFF[CARD,DN_RELAY]      (* TURN OFF DOWN AND STOP RELAYS *)
          PEND_STATUS = 1          (* SET EXECUTIONG FOR UP *)
          PUSH_STATUS = PEND_STATUS(* SET PUSH TO UP *)
        }
      }
      PUSH[PANEL,DNB]
      {
        IF (((!LOCKOUT) && SCREEN2_LOCKOUT) || (!SCREEN2_LOCKOUT))
        { (* ONLY SETUP EXECUTION IF NOT LOCKOUT OR LOCKOUT NOT ACTIVE *)
          CANCEL_WAIT 'SCREEN2 X' (* CANCEL LAST EXECUTION *)
          OFF[CARD,UP_RELAY]      (* TURN OFF UP AND STOP *)
          PEND_STATUS = 2          (* SET EXECUTION FOR DOWN *)
          PUSH_STATUS = PEND_STATUS(* SET PUSH STATUS TO DOWN *)
        }
      }
      PUSH[PANEL,STB]
      { (* NEVER LOCKOUT STOP *)
        CANCEL_WAIT 'SCREEN2 X'   (* CANCEL NEXT EXECUTION *)
        CANCEL_WAIT 'SCREEN2 OFF' (* CANCEL ANY RELAYS OFF'S *)
        OFF[CARD,UP_RELAY]        (* TURN OFF UP AND DOWN *)
        OFF[CARD,DN_RELAY]
        PULSE[CARD,UP_RELAY]      (* PULSE THE STOP RELAY *)
        PULSE[CARD,DN_RELAY]      (* PULSE THE STOP RELAY *)
        PEND_STATUS = 0            (* CANCEL WAIT ENGINE *)
        REAL_STATUS = 3            (* SCREEN IS STOPPED *)
        PUSH_STATUS = 0            (* FORCE PULSE-LIKE FUNCTIONALLITY *)
        OFF[LOCKOUT]               (* CANCEL ANY ACTIVE LOCKOUT *)
        CANCEL_WAIT 'SCREEN2 CLRLOCK'
      }

      RELEASE[PANEL,UPB]
      {
        IF ((!WAITING_DEFAULT) && ((LOCKOUT = 1 && SCREEN2_LOCKOUT) || (!SCREEN2_LOCKOUT)))
        {
          OFF[CARD,UP_RELAY]
          OFF[LOCKOUT] (* IF WE TURN OFF CARD, WE ARE ENDING THE LOCKOUT *)
          CANCEL_WAIT 'SCREEN2 CLRLOCK'
          PUSH_STATUS = 0 (* JUST FOR CLEAN UP *)
        }
        ELSE IF ((LOCKOUT = 1 && SCREEN2_LOCKOUT) || (!SCREEN2_LOCKOUT))
          PUSH_STATUS = 0 (* SET PUSH TO 0 SO ENGINE KNOW IT MUST TURN OFF RELAY *)
      }
      RELEASE[PANEL,DNB]
      {
        IF ((!WAITING_DEFAULT) && ((LOCKOUT = 2 && SCREEN2_LOCKOUT) || (!SCREEN2_LOCKOUT)))
        {
          OFF[CARD,DN_RELAY]
          OFF[LOCKOUT] (* IF WE TURN OFF RELAY, WE ARE ENDING THE LOCKOUT *)
          CANCEL_WAIT 'SCREEN2 CLRLOCK'
          PUSH_STATUS = 0 (* JUST FOR CLEAN UP *)
        }
        ELSE IF ((LOCKOUT = 2 && SCREEN2_LOCKOUT) || (!SCREEN2_LOCKOUT))
          PUSH_STATUS = 0 (* SET PUSH TO 0 SO ENGINE KNOW IT MUST TURN OFF RELAY *)
      }
    }
  }

(* SCREEN ACTIVATION ENGINE *)
  IF (PEND_STATUS)                 (* IF THERE IS STATUS TO BE CHANGED, CHANGE IT *)
  {
    IF (SCREEN2_LOCKOUT)           (* SET LOCKOUT IF ENABLED *)
    {
      LOCKOUT = PEND_STATUS
      CANCEL_WAIT 'SCREEN2 CLRLOCK'
    }
    ON[WAITING_DEFAULT]
    WAIT SCREEN2_BREAK_TIME 'SCREEN2 X' (* BREAK BEFORE MAKE *)
    {
      OFF[CARD,UP_RELAY]          (* TURN OFF ALL RELAYS *)
      OFF[CARD,DN_RELAY]
      SELECT                       (* TURN ON THE RELAY WE WANT *)
      {
        ACTIVE (PEND_STATUS = 1): ON[CARD,UP_RELAY]
        ACTIVE (PEND_STATUS = 2): ON[CARD,DN_RELAY]
      }
      REAL_STATUS = PEND_STATUS    (* SET REAL STATUS *)
      PEND_STATUS = 0              (* CLEAR ANY PEDNIGN STATUS *)
      CANCEL_WAIT 'SCREEN2 OFF'    (* RESET THE RELAY OFF *)
      IF (REAL_STATUS = 1)
      {
        WAIT UP_TIME 'SCREEN2 OFF' (* WAIT MINIMUM TIME TO TURN RELAY OFF *)
        {
          OFF[WAITING_DEFAULT]
          IF (!PUSH_STATUS)        (* IF THE RELEASE ALREADY OCCURED, WE TURN OFF RELAY *)
          {
            OFF[CARD,UP_RELAY]     (* TURN ON THE RELAY WE WANT *)
            OFF[LOCKOUT]           (* IF WE TURN OFF RELAY, WE END LOCKOUT *)
            CANCEL_WAIT 'SCREEN2 CLRLOCK'
          }
        }
      }
      ELSE IF (REAL_STATUS = 2)
      {
        WAIT DN_TIME 'SCREEN2 OFF' (* WAIT MINIMUM TIME TO TURN RELAY OFF *)
        {
          OFF[WAITING_DEFAULT]
          IF (!PUSH_STATUS)        (* IF THE RELEASE ALREADY OCCURED, WE TURN OFF RELAY *)
          {
            OFF[CARD,DN_RELAY]     (* TURN ON THE RELAY WE WANT *)
            OFF[LOCKOUT]           (* IF WE TURN OFF RELAY, WE END LOCKOUT *)
            CANCEL_WAIT 'SCREEN2 CLRLOCK'
          }
        }
      }
    }
  }

(* CLEAN UP LOCKOUT *)
  IF (LOCKOUT && (!PUSH_STATUS))
  { (* MAKE LOCKOUT TIMEOUT THE GREATER RUN TIME + 2 SECONDS + BREAK *)
    IF (DN_TIME > UP_TIME) MAX_LOCKOUT = DN_TIME + SCREEN2_BREAK_TIME + 20
    ELSE                   MAX_LOCKOUT = UP_TIME + SCREEN2_BREAK_TIME + 20
    WAIT MAX_LOCKOUT 'SCREEN2 CLRLOCK'
    {
      OFF[LOCKOUT]
      OFF[WAITING_DEFAULT]
    }
  }

  IF (!SCREEN2_DEFEAT_FEEDBACK)
  {
    [PANEL,UPB] = ((REAL_STATUS = 1 && (!PEND_STATUS)) || PEND_STATUS = 1)
    [PANEL,DNB] = ((REAL_STATUS = 2 && (!PEND_STATUS)) || PEND_STATUS = 2)
    [PANEL,STB] = ((REAL_STATUS = 3 && (!PEND_STATUS)) || PEND_STATUS = 3)
  }
}

(***********************************************************)
(*                     END OF PROGRAM                      *)
(*        DO NOT PUT ANY CODE BELOW THIS COMMENT           *)
(***********************************************************)

